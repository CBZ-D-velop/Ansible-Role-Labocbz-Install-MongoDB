---
- name: "Install packages"
  ansible.builtin.package:
    update_cache: true
    name:
      - "apt-transport-https"
      - "gnupg2"
      - "wget"

- name: "Install MongoDB"
  notify: "Enable and start MongoDB"
  block:
    - name: "Add MongoDB GPG apt Key"
      ansible.builtin.apt_key:
        url: "https://pgp.mongodb.com/server-{{ install_mongodb__version }}.asc"

    - name: "Add MongoDB Repository"
      ansible.builtin.apt_repository:
        repo: "deb http://repo.mongodb.org/apt/{{ ansible_distribution | lower }} {{ install_mongodb__distribution_release }}/mongodb-org/{{ install_mongodb__version }} main"

    - name: "Update apt and install MongoDB"
      ansible.builtin.apt:
        update_cache: true
        name:
          - "mongodb-org"

- name: "Configure MongoDB"
  notify: "Restart MongoDB"
  block:
    - name: "Check if the DB directory exist"
      register: file_check
      ansible.builtin.stat:
        path: "{{ install_mongodb__db_path }}"

    - name: "Create DB directory"
      when: not file_check.stat.exists
      ansible.builtin.file:
        path: "{{ install_mongodb__db_path }}"
        state: directory
        recurse: yes
        owner: "{{ install_mongodb__db_user }}"
        group: "{{ install_mongodb__db_group }}"
        mode: "0700"

    - name: "Check if the log directory exist"
      register: file_check
      ansible.builtin.stat:
        path: "{{ install_mongodb__log_path }}"

    - name: "Create Log directory"
      when: not file_check.stat.exists
      ansible.builtin.file:
        path: "{{ install_mongodb__log_path }}"
        state: directory
        recurse: yes
        owner: "{{ install_mongodb__db_user }}"
        group: "{{ install_mongodb__db_group }}"
        mode: "0700"

    - name: "Check if conf directory exist"
      register: file_check
      ansible.builtin.stat:
        path: "/etc/mongodb"

    - name: "Create conf directory"
      when: not file_check.stat.exists
      ansible.builtin.file:
        path: "/etc/mongodb"
        state: directory
        recurse: yes
        owner: "{{ install_mongodb__db_user }}"
        group: "{{ install_mongodb__db_group }}"
        mode: "0700"

    - name: "Import MongoDB configuration file"
      ansible.builtin.template:
        src: "templates/mongod.conf.j2"
        dest: "/etc/mongodb/mongod.conf"
        lstrip_blocks: yes
        owner: "{{ install_mongodb__db_user }}"
        group: "{{ install_mongodb__db_group }}"
        mode: "0700"

- name: "Create PEMKeyFile / CA"
  when: install_mongodb__ssl | default(false)
  register: output
  changed_when: output.rc != 0
  ansible.builtin.shell: |
    cat {{ install_mongodb__ssl_cert }} {{ install_mongodb__ssl_key }} > {{ install_mongodb__ssl_pem_key_file }}
    cat {{ install_mongodb__ssl_ca }} > {{ install_mongodb__ssl_ca_file }}
    chown {{ install_mongodb__db_user }}:{{ install_mongodb__db_user }} {{ install_mongodb__ssl_pem_key_file }}
    chown {{ install_mongodb__db_user }}:{{ install_mongodb__db_user }} {{ install_mongodb__ssl_key }}

- name: "Import Mongodb service file"
  notify: "Enable and start MongoDB"
  ansible.builtin.template:
    src: "templates/mongod.service.j2"
    dest: "/etc/systemd/system/mongod.service"
    mode: "0700"
    group: "root"
    owner: "root"
    lstrip_blocks: yes

- name: "Fix permissions for first start / restart"
  loop:
    - "/etc/mongodb"
    - "{{ install_mongodb__log_path }}"
    - "{{ install_mongodb__db_path }}"
    - "{{ install_mongodb__ssl_path }}"
  loop_control:
    loop_var: path
  notify:
    - "Restart MongoDB"
  ansible.builtin.file:
    path: "{{ path }}"
    state: directory
    recurse: yes
    owner: "{{ install_mongodb__db_user }}"
    group: "{{ install_mongodb__db_group }}"
    mode: "0700"

- name: "Flush handlers"
  ansible.builtin.meta: flush_handlers

- name: "Handle administration password setting"
  block:
    - name: "Set Admin password: SSL/mTLS"
      when: (install_mongodb__ssl | default(false)) and (install_mongodb__ssl_client_auth | default(false))
      register: output
      changed_when: (output.rc != 0) and not ("'Command createUser requires authentication' in output.stderr")
      failed_when: (output.rc != 0) and not ("'Command createUser requires authentication' in output.stderr")
      ansible.builtin.shell: >
        mongosh --tls --host {{ inventory_hostname }} --port {{ install_mongodb__port }} --tlsCertificateKeyFile {{ install_mongodb__ssl_pem_key_file }} --tlsCAFile {{ install_mongodb__ssl_ca_file }} --eval 'use admin' --eval 'db.createUser({user:"{{ install_mongodb__admin_login }}",pwd:"{{ install_mongodb__admin_password }}",roles:[{ role:"userAdminAnyDatabase",db:"admin" },{ role: "readWriteAnyDatabase", db: "admin" }]})'

    - name: "Set Admin password: SSL"
      when: (install_mongodb__ssl | default(false)) and not (install_mongodb__ssl_client_auth | default(false))
      register: output
      changed_when: (output.rc != 0) and not ("'Command createUser requires authentication' in output.stderr")
      failed_when: (output.rc != 0) and not ("'Command createUser requires authentication' in output.stderr")
      ansible.builtin.shell: >
        mongosh --tls --host {{ inventory_hostname }} --port {{ install_mongodb__port }} --tlsCAFile {{ install_mongodb__ssl_ca_file }} --eval 'use admin' --eval 'db.createUser({user:"{{ install_mongodb__admin_login }}",pwd:"{{ install_mongodb__admin_password }}",roles:[{ role:"userAdminAnyDatabase",db:"admin" },{ role: "readWriteAnyDatabase", db: "admin" }]})'

    - name: "Set Admin password: PLAIN"
      when: not (install_mongodb__ssl | default(false))
      register: output
      changed_when: (output.rc != 0) and not ("'Command createUser requires authentication' in output.stderr")
      failed_when: (output.rc != 0) and not ("'Command createUser requires authentication' in output.stderr")
      ansible.builtin.shell: >
        mongosh --host {{ inventory_hostname }} --port {{ install_mongodb__port }} --eval 'use admin' --eval 'db.createUser({user:"{{ install_mongodb__admin_login }}",pwd:"{{ install_mongodb__admin_password }}",roles:[{ role:"userAdminAnyDatabase",db:"admin" },{ role: "readWriteAnyDatabase", db: "admin" }]})'

- name: "Import MongoDB configuration file with AUTH"
  ansible.builtin.template:
    src: "templates/mongod.conf-auth.j2"
    dest: "/etc/mongodb/mongod.conf"
    lstrip_blocks: yes
    owner: "{{ install_mongodb__db_user }}"
    group: "{{ install_mongodb__db_group }}"
    mode: "0700"

- name: "Stop MongoDB"
  register: install_mongodb__service_status
  changed_when: not install_mongodb__service_status.state != "stopped"
  throttle: 1
  ansible.builtin.service:
    name: "mongod"
    state: "stopped"
    daemon_reload: true
    enabled: yes

- name: "Enable and start MongoDB"
  register: install_mongodb__service_status
  changed_when: not install_mongodb__service_status.state != "started"
  throttle: 1
  ansible.builtin.service:
    name: "mongod"
    state: "started"
    daemon_reload: true
    enabled: yes
